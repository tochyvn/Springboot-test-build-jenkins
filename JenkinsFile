pipeline {

    agent any
    tools { 
        jdk 'JDK8u212' 
        maven 'Maven' 
    }
    stages {

    stage('Build') {
	    steps {
    	    script {

         sh "sudo ls -la"
	 sh "pwd"
	 sh 'echo "${WORKSPACE}"'
		 sh "mvn clean install -DskipTests"
		 
                 sh "java -version"
		 sh "mvn --version"
		 sh 'echo "PATH = ${PATH}"'
                 sh 'echo "M2_HOME = ${M2_HOME}"'

	     }
   	        
        }
    }

    stage('Zip archive'){
        steps{
             script{
                 sh "ls -la .."
                 sh "pwd"
                 build = "livraison"
                 archivejar = "livraison.zip"

                 sh "sudo mkdir -pv ${WORKSPACE}/livraison/"
                 sh "sudo rm -rfv ${WORKSPACE}/livraison/*"
                 sh "sudo rm -rfv ${WORKSPACE}/livraison.zip"

                 sh "sudo mkdir -pv ${build}"
                 sh "sudo rm -rfv ${build}/*"
                 sh "sudo cp -v target/${archivejar} ${build}"
                 sh "sudo cp -v dockerfile ${build}"

		sh 'gzip --version'
		sh 'zip -v'
                sh "sudo zip -r ${WORKSPACE}/livraison/livraison.zip ${WORKSPACE}/${build}"		 
		 
		sh "ls -la ${WORKSPACE}/livraison"
		sh "ls -la ${WORKSPACE}/${build}"
             }
        }
    }

    
    stage('SSH transfer') {
        steps{
            script {
                            env.SSH_CONFIG_NAME = "overview-aws-ec2"
                                path_to_file = "livraison"
                                 file_name = "livraison.zip"
                                 remote_dir_path = "/"
				 sh "pwd"
				 sh "ls -la"
				 sh "ls -la ${path_to_file}"
                          sshPublisher(
                           continueOnError: false, failOnError: true,
                           publishers: [
                            sshPublisherDesc(
                             configName: "${env.SSH_CONFIG_NAME}",
                             verbose: true,
                             transfers: [
                              sshTransfer(
                               sourceFiles: "${path_to_file}/${file_name}, ${path_to_file}/${file_name}",
                               removePrefix: "${path_to_file}",
                               remoteDirectory: "${remote_dir_path}",
                               execCommand: "ls -la ${path_to_file} && sudo unzip -o ${path_to_file}/${file_name}"
                              )
                             ])
                           ])
                         }
        }

        }
    

    stage('Clean') {
	 steps {
		script {
			sh "sudo ls -la"
			}
		}
	}

}
    post {
	always {
		cleanWs()
		}
	}
}

