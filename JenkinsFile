pipeline {

    agent any
    tools { 
        jdk 'JDK8u212' 
        maven 'Maven' 
    }
    stages {

    stage('Build') {
	    steps {
    	    script {
	 	sh "pwd"
	 	sh 'echo "${WORKSPACE}"'
		 
                sh "java -version"
		sh "mvn --version"
		
		sh "mvn clean install -DskipTests"
		
	     }
   	        
        }
    }

    stage('Zip archive'){
        steps{
             script{
                 sh "ls -la .."
                 sh "pwd"
                 build = "livraison"
                 archivejar = "livraison.zip"
		 jarfile = "simple-spring-security-imp-0.0.1-SNAPSHOT.jar"
		 dockerfile = "dockerfile"
		 dockercompose = "docker-compose.yml"

                 sh "sudo mkdir -pv ${WORKSPACE}/livraison/"
                 sh "sudo rm -rfv ${WORKSPACE}/livraison/*"
                 sh "sudo rm -rfv ${WORKSPACE}/livraison.zip"

                 sh "sudo mkdir -pv ${build}"
                 sh "sudo rm -rfv ${build}/*"
                 sh "sudo cp -v target/${jarfile} ${dockerfile} ${dockercompose} ${build}"

		sh 'zip -v'
                sh "sudo zip -r ${WORKSPACE}/livraison/livraison.zip ${WORKSPACE}/${build}"		 
		 
		sh "ls -la ${WORKSPACE}/livraison"
		sh "ls -la ${WORKSPACE}/${build}"
             }
        }
    }

    
    stage('SSH transfer') {
        steps{
            script {
                            env.SSH_CONFIG_NAME = "overview-aws-ec2"
                            path_to_file = "livraison"
                            file_name = "livraison.zip"
                            remote_dir_path = "/home/tochyvn/test"
		            docker_compose_destination = "${remote_dir_path}/var/lib/jenkins/workspace/Test_Maven_project/livraison"
		            sh "pwd"
			    sh "ls -la"
			    sh "ls -la ${path_to_file}"
                          sshPublisher(
                           continueOnError: false, failOnError: true,
                           publishers: [
                            sshPublisherDesc(
                             configName: "${env.SSH_CONFIG_NAME}",
                             verbose: true,
                             transfers: [
                              sshTransfer(
                               sourceFiles: "${path_to_file}/${file_name}",
                               removePrefix: "${path_to_file}",
                               remoteDirectory: "/",
                               execCommand: "pwd && sudo unzip -o ${remote_dir_path}/${file_name} -d ${remote_dir_path} && cd ${docker_compose_destination} && sudo docker-compose up --build -d"
                              )
                             ])
                           ])
                         }
        }

        }
    

    stage('Clean') {
	 steps {
		script {
			sh 'echo "${WORKSPACE}"'
			sh "ls -la ${WORKSPACE}"	
		}
	}
    }

}
    post {
	always {
		cleanWs()
		sh 'ls -la ${WORKSPACE}/..'
		
	}
	cleanup {
		sh 'rm -rfv ${WORKSPACE}/../'
        	deleteDir()
		sh 'ls -la "${WORKSPACE}"/..'
    	}
    }
}

